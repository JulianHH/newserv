#!/usr/bin/env python
import psycopg2, psycopg2.extras, time, smtplib, traceback
from config import CONFIG
from templates import MAILTEMPLATES

conn = psycopg2.connect(CONFIG["conn"])
assert(CONFIG["from"])
assert(CONFIG["smtphost"])

for key, value in MAILTEMPLATES["languages"].items():
  MAILTEMPLATES["languages"][key] = dict([(k, { "body": v["body"].strip().replace("\n", "\r\n"), "subject": v["subject"]}) for k, v in value.items()])

MAILTEMPLATES["languages"][""] = MAILTEMPLATES["languages"][CONFIG["defaultlang"]]

def inject(to, subject, body):
  msg = "From: %s\r\nTo: %s\r\nSubject: %s\r\nX-Mailer: Q9Batcher\r\n\r\n%s" % (CONFIG["from"], to, subject, body)
  server = smtplib.SMTP(CONFIG["smtphost"])
  server.sendmail(CONFIG["from"], to, msg)

def processtemplate(emailtype, lang, obj):
  if MAILTEMPLATES["mutators"].has_key(emailtype):
    MAILTEMPLATES["mutators"][emailtype](CONFIG, obj)

  if MAILTEMPLATES["languages"].has_key(lang) and MAILTEMPLATES["languages"][lang].has_key(emailtype):
    k = MAILTEMPLATES["languages"][lang][emailtype]
  else:
    k = template, subject = MAILTEMPLATES["languages"][""][emailtype]

  return k["body"] % obj, k["subject"] % obj

def email(userid, emailtype, prevemail):
  cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
  cur.execute("SELECT users.*, code FROM users LEFT JOIN languages ON language = languageid WHERE id = %d" % userid)

  unifieddict = {}
  for key, value in cur.fetchone().items():
    unifieddict["user.%s" % key] = value

  if prevemail:
    unifieddict["prevemail"] = prevemail

  if unifieddict["user.language"] != 0:
    language = unifieddict["user.code"]
  else:
    language = ""

  template, subject = processtemplate(emailtype, language, unifieddict)
  inject(unifieddict["user.email"], subject, template)

def main():
  ignoring = []
  while True:
    cur = conn.cursor()
    cur.execute("SELECT mailid, userid, emailtype, prevemail FROM email")

    deleting = []
    while True:
      rows = cur.fetchone() 
      if not rows:
        break

      try:
        email(rows[1], rows[2], rows[3])
        deleting.append(rows[0])
      except:
        ignoring.append(rows[0])
        traceback.print_exc()

    if len(deleting) > 0:
      cur.execute("BEGIN TRANSACTION")
      for x in deleting:
        cur.execute("DELETE FROM email WHERE mailid = %d" % x)
      cur.execute("COMMIT")

    time.sleep(1)

if __name__ == "__main__":
  main()
